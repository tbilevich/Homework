package home_work_1.task2;

public class PriorityOfOperators {
    public static void main(String[] args) {
        int a = 8;
        int b = 2;

        System.out.println("2.1");
        /* 2.1 отработает без проблем, но выведет 5, т к "/" возвращает целую часть от деления
            Иными словами, 2 / 8 = 0, 5 + 0 = 5
        */
        int firstExpression = 5 + 2 / a;
        System.out.println("  5 + 2 / a = " + firstExpression);

        System.out.println("2.2");
        /* 2.2 отработает без проблем. Первым посчитает то, что находится в скобках,
            а потом вернет целую часть от деления. 7 / 8 = 0
         */
        int secondExpression = (5 + 2) / a;
        System.out.println("  (5 + 2) / a = " + secondExpression);

        System.out.println("2.3");
        /* 2.3 Будет ошибка компиляции, т.к. нельзя для литерала сделать ++
          Необходимо 2 занести в переменную.
          Сделает сложение в скобках, к b прибавит 1 (т к ++ стоит после b,
          то выполниться только после операции с предыдущим значением b) и разделит получившееся
          число в скобках на а. Выведет целую часть от деления
          (5 + 2) / 8 = 0
        */
        int thirdExpression = (5 + b++) / a;
        System.out.println("  (5 + b++) / a = " + thirdExpression);

        System.out.println("2.4");
        /* 2.4 Будет ошибка компиляции, т.к. нельзя для литерала сделать ++
           Необходимо 2 занести в переменную. Но т к переменную b мы уже использовали в предыдущем примере,
           а в условии выражения требуется "2" ( (5 + 2++) / --8 ), мы вернем b к двойке.
           Сначала уменьшит а на 1, сделает сложение в скобках, к b прибавит 1 (т к ++ стоит после b,
           то выполниться только после операции с предыдущим значением b) и разделит получившееся
           число в скобках на уменьшиную на 1 а. Выведет целую часть от деления
           (5 + 2) / 7 = 1
        */
        b -= 1; // возвращаем b в первоначальное значение
        int forthExpression = (5 + b++) / --a;
        System.out.println("  (5 + b++) / --a = " + forthExpression);

        System.out.println("2.5");
        /* 2.5 Будет ошибка компиляции, т.к. нельзя для литерала сделать ++
           В данном выражении необходимо вернуть еще и переменную а в исходное значение,
           как требуется в условии выражения ( (5 * 2 >> 2++) / --8 ), мы вернем а к восьмерке.
           Сначала уменьшит а на 1, посчитает произведение, в двоичной системе счисления сдвинет на 2 знака вправо,
           к b прибавит 1 (т к ++ стоит после b, то выполниться только после операции с предыдущим значением b)
           и разделит получившееся число в скобках на уменьшиную на 1 а. Выведет целую часть отделения
           (10 >> 2) / 7 -> (00001010 (10) -> 00000010 (2)) -> 2 /7 = 0
        */
        b -= 1; // возвращаем b в первоначальное значение
        a += 1; // возвращаем а в первоначальное значение
        int fifthExpression = (5 * 2 >> b++) / --a;
        System.out.println("  (5 * 2 >> b++) / --a = " + fifthExpression);

        System.out.println("2.6");
        /* 2.6 Будет ошибка компиляции, т.к. нельзя для литерала сделать ++
           Это тернарный оператор.
           При занесении 2 и 8 в переменные, отработает, выведя первое значение,
           если результат выражения является истинным, иначе второе.
        */
        b -= 1; // возвращаем b в первоначальное значение
        a += 1; // возвращаем а в первоначальное значение
        int sixthExpression = (5 + 7 > 20 ? 68 : 22 * 2 >> b++) / --a;
        System.out.println("  (5 + 7 > 20 ? 68 : 22 * 2 >> b++) / --a = " + sixthExpression);


        System.out.println("2.7");
        /* 2.7 Будет ошибка, т к тернарный оператор должен быть "booleanExpression ? expression1 : expression2",
            а в данном выражении expression1 получается типа boolean
        */
        System.out.println("Error!");
        /*
        b -= 1;
        a += 1;
        int seventhExpression = (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> b++) / --a;
        System.out.println("  (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> b++) / --a = " + seventhExpression);
        */

        System.out.println("2.8");
        /* 2.8 Отработает без проблем. Вернет false,
            т к для true должно быть истинно (6 - 2 > 3) и (12 * 12 <= 119) одновременно
        */
        boolean eighthExpression = 6 - 2 > 3 && 12 * 12 <= 119;
        System.out.println("  6 - 2 > 3 && 12 * 12 <= 119 = " + eighthExpression);

        System.out.println("2.9");
        /* 2.9 Отработает без проблем. Вернет false,
            т к для true должно быть истинны оба значения
         */
        boolean ninthExpression = true && false;
        System.out.println("  true && false = " + ninthExpression);

    }
}
